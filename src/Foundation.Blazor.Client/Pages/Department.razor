@page "/Department"

@using Microsoft.AspNetCore.Components.Forms
@using Foundation.Dtos
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Popups
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Department - @OrganizationName</h3>

<SfGrid DataSource="@Departments" @ref="DepartmentGrid" AllowPaging="true" AllowSorting="true" Toolbar="@Toolbaritems">
    <GridEvents OnToolbarClick="OnToolbarClick" TValue="DepartmentDto"></GridEvents>
    <GridColumns>
        <GridColumn Field="Id" HeaderText="ID" IsPrimaryKey="true" Visible="false"></GridColumn>
        <GridColumn Field="Name" HeaderText="Department Name" Width="250"></GridColumn>
        <GridColumn HeaderText="Manage Doctor" Width="150">
            <Template>
                @{
                    var department = (context as DepartmentDto);
                }
                <button class="e-btn" @onclick="@(() => NavigateDoctor(department))">Doctor</button>
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

<SfDialog @ref="Dialog" Width="400px" ShowCloseIcon="true" Header="@DialogTitle" Visible="false">
    <DialogTemplates>
        <Content>
            <EditForm Model="@CurrentDepartment" OnValidSubmit="SaveDepartment">                
                <DataAnnotationsValidator />

                <div class="mb-3">
                    <label class="form-label">
                        Department <span style="color: red">*</span>
                    </label>
                    <SfTextBox TValue="string" @bind-Value="CurrentDepartment.Name"
                               Placeholder="Enter Department Name" FloatLabelType="FloatLabelType.Auto" />
                    <ValidationMessage style="color: red" For="@(() => CurrentDepartment.Name)" />
                </div>

                <div class="text-end mt-4">
                    <button type="submit" class="e-btn e-primary">Save</button>
                    <button type="button" class="e-btn" @onclick="CloseDialog">Cancel</button>
                </div>
            </EditForm>
        </Content>
    </DialogTemplates>
</SfDialog>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string OrganizationId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string OrganizationName { get; set; }

    private SfGrid<DepartmentDto> DepartmentGrid;
    private SfDialog Dialog;

    private List<DepartmentDto> Departments = new();
    private CreateUpdateDepartmentDto CurrentDepartment = new();
    private string DialogTitle = "";
    private bool IsNew = true;

    private List<ItemModel> Toolbaritems = new()
    {
        new ItemModel() { Text = "Add", TooltipText = "Add Department", PrefixIcon = "e-add" },
        new ItemModel() { Text = "Edit", TooltipText = "Edit Department", PrefixIcon = "e-edit" },
        new ItemModel() { Text = "Delete", TooltipText = "Delete Department", PrefixIcon = "e-delete" },
        new ItemModel() { Text = "Refresh", TooltipText = "Refresh", PrefixIcon = "e-refresh" }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadDepartments();
    }

    private async Task LoadDepartments()
    {
        if (!string.IsNullOrEmpty(OrganizationId))
        {
            Departments = await Http.GetFromJsonAsync<List<DepartmentDto>>(
                $"https://localhost:44337/api/app/department/departments-by/{OrganizationId}"
            ) ?? new();
        }
    }

    private async Task OnToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        var selectedRow = await DepartmentGrid.GetSelectedRecordsAsync();

        if (args.Item.Text == "Add")
        {
            IsNew = true;
            DialogTitle = "Add Department";
            CurrentDepartment = new CreateUpdateDepartmentDto { OrganizationId = Guid.Parse(OrganizationId) };
            await Dialog.ShowAsync();
        }
        else if (args.Item.Text == "Edit" && selectedRow.Any())
        {
            IsNew = false;
            DialogTitle = "Edit Department";
            var selected = selectedRow.First();
            CurrentDepartment = new CreateUpdateDepartmentDto
            {
                Id = selected.Id,
                Name = selected.Name,
                OrganizationId = selected.OrganizationId
            };
            await Dialog.ShowAsync();
        }
        else if (args.Item.Text == "Delete" && selectedRow.Any())
        {
            await DeleteDepartment(selectedRow.First().Id);
        }
        else if (args.Item.Text == "Refresh")
        {
            await LoadDepartments();
        }
    }

    private async Task SaveDepartment()
    {
        if (IsNew)
        {
            await Http.PostAsJsonAsync("https://localhost:44337/api/app/department/department", CurrentDepartment);
        }
        else
        {
            await Http.PutAsJsonAsync(
                $"https://localhost:44337/api/app/department/department/{CurrentDepartment.Id}", 
                CurrentDepartment
            );
        }

        await LoadDepartments();
        await Dialog.HideAsync();
    }

    private async Task DeleteDepartment(Guid id)
    {
        await Http.DeleteAsync($"https://localhost:44337/api/app/department/department/{id}");
        await LoadDepartments();
    }

    private async Task CloseDialog()
    {
        await Dialog.HideAsync();
    }

    private void NavigateDoctor(DepartmentDto department)
    {
        NavigationManager.NavigateTo($"Doctor?DepartmentId={department.Id}&DepartmentName={department.Name}");
    }
}
