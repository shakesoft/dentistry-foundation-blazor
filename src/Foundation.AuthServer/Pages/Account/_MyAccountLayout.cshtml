@using System.Globalization
@using Microsoft.Extensions.Localization
@using Microsoft.Extensions.Options
@using Volo.Abp.AspNetCore.MultiTenancy
@using Volo.Abp.AspNetCore.Mvc.UI.Components.LayoutHook
@using Volo.Abp.AspNetCore.Mvc.UI.MultiTenancy.Localization
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.LeptonXLite.Bundling
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.LeptonXLite.Themes.LeptonXLite.Components.PageAlerts
@using Volo.Abp.AspNetCore.Mvc.UI.Theming
@using Volo.Abp.AspNetCore.Mvc.UI.Widgets.Components.WidgetScripts
@using Volo.Abp.AspNetCore.Mvc.UI.Widgets.Components.WidgetStyles
@using Volo.Abp.MultiTenancy
@using Volo.Abp.Localization
@using Volo.Abp.Ui.Branding
@using Volo.Abp.Ui.LayoutHooks
@inject IBrandingProvider BrandingProvider
@inject IOptions<AbpMultiTenancyOptions> MultiTenancyOptions
@inject ICurrentTenant CurrentTenant
@inject IStringLocalizer<AbpUiMultiTenancyResource> MultiTenancyStringLocalizer
@inject ITenantResolveResultAccessor TenantResolveResultAccessor
@inject IOptions<AbpThemingOptions> ThemingOptions

@{
    Layout = null;
    var containerClass = ViewBag.FluidLayout == true ? "container-fluid" : "container"; //TODO: Better and type-safe options
    var rtl = CultureHelper.IsRtl ? "rtl" : string.Empty;
}

<!DOCTYPE html>

<html lang="@CultureInfo.CurrentCulture.Name" dir="@rtl">
<head>
    @await Component.InvokeLayoutHookAsync(LayoutHooks.Head.First, StandardLayouts.Account)

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
	<link rel="icon" href="~/images/favicon/favicon.ico" type="image/svg+xml">
    

    <abp-style-bundle name="@LeptonXLiteThemeBundles.Styles.Global" />

    @await RenderSectionAsync("styles", false)

    @await Component.InvokeAsync(typeof(WidgetStylesViewComponent))

    @await Component.InvokeLayoutHookAsync(LayoutHooks.Head.Last, StandardLayouts.Account)
</head>
<body class="abp-account-layout @rtl">
    @await Component.InvokeLayoutHookAsync(LayoutHooks.Body.First, StandardLayouts.Account)

    <div class="container-fluid h-100 p-0">
        <div class="row h-100 g-0">
            <!-- Left half: image -->
            <div class="col-12 col-md-6 d-none d-md-block p-0">
                <div class="h-100 login-image-bg"></div>
            </div>
            <!-- Right half: content -->
            <div class="col-12 col-md-6 d-flex flex-column justify-content-center align-items-center p-5 account-content-bg">
                <img class="account-logo" src="/images/login-logo.png" alt="Logo" class="mb-4"/>
                <div class="mx-auto w-100" style="max-width: 360px;">
                    @if (MultiTenancyOptions.Value.IsEnabled &&
                        (TenantResolveResultAccessor.Result?.AppliedResolvers?.Contains(CookieTenantResolveContributor.ContributorName) == true ||
                        TenantResolveResultAccessor.Result?.AppliedResolvers?.Contains(QueryStringTenantResolveContributor.ContributorName) == true))
                    {
                        <div class="card shadow-sm rounded mb-3">
                            <div class="card-body px-5">
                                <div class="row">
                                    <div class="col">
                                        <span style="font-size: .8em;" class="text-uppercase text-muted">@MultiTenancyStringLocalizer["Tenant"]</span><br />
                                        <h6 class="m-0 d-inline-block">
                                            @if (CurrentTenant.Id == null)
                                            {
                                                <span>
                                                    @MultiTenancyStringLocalizer["NotSelected"]
                                                </span>
                                            }
                                            else
                                            {
                                                <strong>@(CurrentTenant.Name ?? CurrentTenant.Id.Value.ToString())</strong>
                                            }
                                        </h6>
                                    </div>
                                    <div class="col-auto">
                                        <a id="AbpTenantSwitchLink" href="javascript:;" class="btn btn-sm mt-3 btn-outline-primary">@MultiTenancyStringLocalizer["Switch"]</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    @(await Component.InvokeAsync<PageAlertsViewComponent>())
                    @await Component.InvokeLayoutHookAsync(LayoutHooks.PageContent.First, StandardLayouts.Account)
                    @RenderBody()
                    @await Component.InvokeLayoutHookAsync(LayoutHooks.PageContent.Last, StandardLayouts.Account)
                </div>
            </div>
            
        </div>
    </div>

    <abp-script-bundle name="@LeptonXLiteThemeBundles.Scripts.Global" />

    <script src="~/Abp/ApplicationLocalizationScript?cultureName=@CultureInfo.CurrentUICulture.Name"></script>
    <script src="~/Abp/ApplicationConfigurationScript"></script>
    <script src="~/Abp/ServiceProxyScript"></script>

    @await RenderSectionAsync("scripts", false)

    @await Component.InvokeAsync(typeof(WidgetScriptsViewComponent))

    @await Component.InvokeLayoutHookAsync(LayoutHooks.Body.Last, StandardLayouts.Account)
</body>
</html>

<style>
    
html, body {
    height: 100%;
    margin: 0;  
    padding: 0;
}

.login-image-bg {
    background-image: url('/images/login-image.png');
    background-size: cover;
    background-position: center;
    height: 100%;
}

.account-content-bg {
    background-color: #323232;
}

.account-logo {
    max-width: 180px;
    margin-bottom: 20px;
}
    
</style>